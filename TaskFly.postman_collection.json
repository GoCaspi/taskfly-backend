{
	"info": {
		"_postman_id": "84a40b2f-17f2-4c43-940a-5ce822fe2b9e",
		"name": "TaskFly",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21612803"
	},
	"item": [
		{
			"name": "CreateUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create User 1\", () => {",
							"    pm.response.to.have.status(201)",
							"})",
							"",
							"var jsonBody = pm.response.json()",
							"",
							"pm.environment.set(\"userID1\", jsonBody.id)",
							"",
							"var user2 = {",
							"    \"firstName\": pm.environment.get(\"userfirstName1\"),",
							"    \"lastName\": pm.environment.get(\"userlastName1\"),",
							"    \"email\": pm.environment.get(\"userEmail1\"),",
							"    \"password\": pm.environment.get(\"userpassword1\"),",
							"    \"team\": pm.environment.get(\"userTeam1\"),",
							"    \"listId\": pm.environment.get(\"userListId1\")",
							"}",
							"",
							"var user3 = {",
							"    \"username\": pm.environment.get(\"userUsername3\"),",
							"    \"password\": pm.environment.get(\"userPassword3\"),",
							"    \"email\": pm.environment.get(\"userEmail3\"),",
							"    \"firstname\": pm.environment.get(\"userFirstname3\"),",
							"    \"lastname\": pm.environment.get(\"userLastname3\")",
							"}",
							"",
							"var errorInsufficentData = {",
							"    \"username\": \"{{userUsername1}}\",",
							"    \"password\": \"{{userPassword1}}\",",
							"    \"firstname\": \"{{userFirstname1}}\",",
							"    \"lastname\": \"{{userLastname1}}\",",
							"}",
							"",
							"var errorInvalidPayload = \"{'username': 'Babo123', password:}\"",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"host\") + \"/user\",",
							"    method: \"POST\",",
							"    body: JSON.stringify(user2)",
							"}, (err, res) => {",
							"    var jsonBody = res.json()",
							"    pm.environment.set(\"userID2\", jsonBody.id)",
							"    pm.test(\"Create User 2\", () => {",
							"        pm.expect(res).to.have.status(201)",
							"    })",
							"    ",
							"    pm.sendRequest({",
							"        url: pm.environment.get(\"host\") + \"/user\",",
							"        method: \"POST\",",
							"        body: JSON.stringify(user2)",
							"    }, (err, res) => {",
							"        pm.test(\"User already exists\", () => {",
							"            pm.expect(res).to.have.status(500)",
							"    })",
							"        ",
							"})",
							"    ",
							"})",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"host\") + \"/user\",",
							"    method: \"POST\",",
							"    body: JSON.stringify(user3)",
							"}, (err, res) => {",
							"    var jsonBody = res.json()",
							"    pm.environment.set(\"userID3\", jsonBody.id)",
							"    pm.test(\"Create User 3\", () => {",
							"        pm.expect(res).to.have.status(201)",
							"    })",
							"})",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"host\") + \"/user\",",
							"    method: \"POST\",",
							"    body: JSON.stringify(errorInsufficentData)",
							"}, (err, res) => {",
							"    pm.test(\"Insufficent Data\", () => {",
							"        pm.expect(res).to.have.status(500)",
							"    })",
							"})",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"host\") + \"/user\",",
							"    method: \"POST\",",
							"    body: errorInvalidPayload",
							"}, (err, res) => {",
							"    pm.test(\"Invalid Payload\", () => {",
							"        pm.expect(res).to.have.status(400)",
							"    })",
							"})",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\": \"Sahand\",\n    \"lastName\": \"Armin\",\n    \"email\":\"s.armin@gmail.com\",\n    \"password\":\"password\",\n    \"team\":\"Okapi\",\n    \"listId\":\"1\"\n\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/create",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetallUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status check\", () => {",
							"    pm.response.to.have.status(200)",
							"})",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"host\") + \"/user\",",
							"    method: \"GET\",",
							"   ",
							"}, (err, res) => {",
							"    pm.test(\"Check Unauthorized User\", () => {",
							"        pm.expect(res).to.have.status(401)",
							"    })",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/user",
					"host": [
						"{{host}}"
					],
					"path": [
						"user"
					]
				}
			},
			"response": [
				{
					"name": "Getalluser",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/user",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "plain",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain;charset=UTF-8"
						},
						{
							"key": "Content-Length",
							"value": "309"
						},
						{
							"key": "Date",
							"value": "Fri, 28 Oct 2022 06:23:10 GMT"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=60"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "[{\"id\":\"635b74f37a4fc27d889f187c\",\"firstName\":\"Müller\",\"lastName\":\"Müller\",\"email\":\"Müller@gmail.com\",\"password\":\"password\",\"team\":\"Okapi\",\"listId\":\"1\"},{\"id\":\"635b75067a4fc27d889f187d\",\"firstName\":\"Patrik\",\"lastName\":\"Müller\",\"email\":\"Patrik@gmail.com\",\"password\":\"password\",\"team\":\"Okapi\",\"listId\":\"1\"}]"
				}
			]
		},
		{
			"name": "GetUser",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/user/63773343094b4d6d2ec651f9",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"63773343094b4d6d2ec651f9"
					]
				}
			},
			"response": [
				{
					"name": "GetUser",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/user/635a75c03ac4195d34f72be2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"user",
								"635a75c03ac4195d34f72be2"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain;charset=UTF-8"
						},
						{
							"key": "Content-Length",
							"value": "122"
						},
						{
							"key": "Date",
							"value": "Thu, 27 Oct 2022 12:27:50 GMT"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=60"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"635a75c03ac4195d34f72be2\",\n    \"firstName\": \"Bremen\",\n    \"lastName\": \"Müller\",\n    \"email\": \"Luca@gmail.com\",\n    \"password\": \"password\"\n}"
				}
			]
		},
		{
			"name": "UpdateUser",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Update User Status\", () => {",
							"    pm.response.to.have.status(200)",
							"})",
							"",
							"var body2 = {",
							"    \"id\": pm.environment.get(\"userID2\"),",
							"    \"password\": \"123\"",
							"}",
							"",
							"var body3 = {",
							"    \"id\": pm.environment.get(\"userID3\"),",
							"    \"group\": \"admin\"",
							"}",
							"",
							"var body4 = `",
							"    [",
							"        {",
							"            \"id\": \"${pm.environment.get(\"userID1\")}\",",
							"            \"team\": \"bestTeam\"",
							"        },",
							"        {",
							"            \"id\": \"${pm.environment.get(\"userID2\")}\",",
							"            \"team\": \"bestTeam\"",
							"        },",
							"        {",
							"            \"id\": \"${pm.environment.get(\"userID3\")}\",",
							"            \"team\": \"bestTeam\"",
							"        }",
							"    ]",
							"`",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"host\") + \"/user\",",
							"    method: \"PATCH\",",
							"    body: JSON.stringify(body2),",
							"    header: {",
							"        Authorization: \"Bearer \" + pm.environment.get(\"userToken3\") ",
							"    }",
							"}, (err, res) => {",
							"    pm.test(\"Check Password Update dosent work\", () => {",
							"        pm.expect(res).to.have.status(401)",
							"    })",
							"})",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"host\") + \"/user\",",
							"    method: \"PATCH\",",
							"    body: JSON.stringify(body3),",
							"    header: {",
							"        Authorization: \"Bearer \" + pm.environment.get(\"userToken2\") ",
							"    }",
							"}, (err, res) => {",
							"    pm.test(\"Check Group Update dosent work\", () => {",
							"        pm.expect(res).to.have.status(401)",
							"    })",
							"})",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"host\") + \"/user\",",
							"    method: \"PATCH\",",
							"    body: body4,",
							"    header: {",
							"        Authorization: \"Bearer \" + pm.environment.get(\"userToken1\") ",
							"    }",
							"}, (err, res) => {",
							"    pm.test(\"Update Groups from Users\", () => {",
							"        pm.expect(res).to.have.status(200)",
							"    })",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\": \"Luis\",\n    \"lastName\": \"Müller\",\n    \"email\":\"Luis_Müller@gmail.com\",\n    \"password\":\"password\",\n    \"team\":\"Okapi\",\n    \"listId\":\"1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/6363c2583920285de3098fa7",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"6363c2583920285de3098fa7"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User 1 Status check\", () => {",
							"    pm.response.to.have.status(200)",
							"})",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/user/6363e57add38660a75db4470",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"6363e57add38660a75db4470"
					]
				}
			},
			"response": []
		},
		{
			"name": "Actuator",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": ""
				}
			},
			"response": []
		},
		{
			"name": "UpdateTask",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check if Valid Request Passes Controller\", () => {",
							"    pm.response.to.have.status(200)",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"userId\":\"6368c112642b964cb6e371a7\",\n    \"listId\":\"2\",\n    \"team\":\"blue\",\n    \"deadline\":\"11-11-2022\",\n    \"body\":{\n        \"topic\":\"new topic\",\n        \"priority\":\"new priority\",\n        \"description\":\"new description text\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/task/{{tcTempID}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"task",
						"{{tcTempID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteTaskById",
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/task/6368c0f3642b964cb6e371a6",
					"host": [
						"{{host}}"
					],
					"path": [
						"task",
						"6368c0f3642b964cb6e371a6"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetTaskById",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/task/2",
					"host": [
						"{{host}}"
					],
					"path": [
						"task",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetAllTasks",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/task/userId/2",
					"host": [
						"{{host}}"
					],
					"path": [
						"task",
						"userId",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "CreateNewTask",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-XSRF-TOKEN",
						"value": "2BD61488AC0031631BF5DC7234E80023",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"userId\":\"63773343094b4d6d2ec651f9\",\n    \"listId\":\"6377783effb2ae2e4b610f5b\",\n    \"team\":\"blue\",\n    \"deadline\":\"11-11-2022\",\n    \"body\":{\n        \"topic\":\"new topic\",\n        \"priority\":true,\n        \"description\":\"new description text\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/task",
					"host": [
						"{{host}}"
					],
					"path": [
						"task"
					]
				}
			},
			"response": []
		},
		{
			"name": "CreateFakeEmployees",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"employees\": [\n    {\n      \"id\": \"1\",\n      \"first_name\": \"John\",\n      \"last_name\": \"Kenn\",\n      \"email\": \"john@gmail.com\",\n      \"department\": \"Logistics\"\n    },\n    {\n      \"id\": \"2\",\n      \"first_name\": \"Maria\",\n      \"last_name\": \"gonjaless\",\n      \"email\": \"maria@gmail.com\",\n      \"department\": \"Management\"\n    },\n    {\n      \"id\": \"3\",\n      \"first_name\": \"Lora\",\n      \"last_name\": \"kai\",\n      \"email\": \"lora@gmail.com\",\n      \"department\": \"Logistics\"\n    }\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/employee/create",
					"host": [
						"{{host}}"
					],
					"path": [
						"employee",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "CreateTaskCollection",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Valid Request\", () => {",
							"    pm.response.to.have.status(201)",
							"})",
							"",
							"pm.environment.set(\"tcTempID\", pm.response.json().id)",
							"",
							"var bodyInvalidJSON = \"{naem: '123'}\"",
							"var missingContent = {",
							"    \"name\": \"TestCollection1\",",
							"    \"ownerID\": \"\"",
							"}",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"host\") + \"/tc\",",
							"    method: \"POST\",",
							"    body: bodyInvalidJSON,",
							"    header: {",
							"        'Content-Type': 'application/json'",
							"    }",
							"}, (err, res) => {",
							"    pm.test(\"Test Invalid JSON\", () => {",
							"        pm.expect(res).to.have.status(400)",
							"    })",
							"})",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"host\") + \"/tc\",",
							"    method: \"POST\",",
							"    body: missingContent,",
							"    header: {",
							"        'Content-Type': 'application/json'",
							"    }",
							"}, (err, res) => {",
							"    pm.test(\"Missing JSON Content\", () => {",
							"        pm.expect(res).to.have.status(400)",
							"    })",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-XSRF-TOKEN",
						"value": "{{xsrf-token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"TestCollection3\",\n    \"ownerID\": \"12346544\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/tc",
					"host": [
						"{{host}}"
					],
					"path": [
						"tc"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetTaskCollectionsByOwnerID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful Request\", () => {",
							"    pm.response.to.have.status(200)",
							"})",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"host\") + \"/tc/user/123\",",
							"    method: \"GET\"",
							"}, (err, res) => {",
							"    pm.test(\"Not existing User\", () => {",
							"        pm.expect(res).to.have.status(404)",
							"    })",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "X-XSRF-TOKEN",
						"value": "2539192522269EFA040CFE76117EBB85",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{host}}/tc/user/6368c011642b964cb6e371a5",
					"host": [
						"{{host}}"
					],
					"path": [
						"tc",
						"user",
						"6368c011642b964cb6e371a5"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetTaskCollectionByID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful Request\", () => {",
							"    pm.response.to.have.status(200)",
							"})",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"host\") + \"/tc/id/123\",",
							"    method: \"GET\"",
							"}, (err, res) => {",
							"    pm.test(\"Not existing User\", () => {",
							"        pm.expect(res).to.have.status(404)",
							"    })",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/tc/id/{{tcTempID}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"tc",
						"id",
						"{{tcTempID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetTaskCollectionsByTeamID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful Request\", () => {",
							"    pm.response.to.have.status(200)",
							"})",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"host\") + \"/tc/team/123\",",
							"    method: \"GET\"",
							"}, (err, res) => {",
							"    pm.test(\"404 User dosent exist\", () => {",
							"        pm.expect(res).to.have.status(404)",
							"    })",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/tc/team/6368c011642b964cb6e371a5",
					"host": [
						"{{host}}"
					],
					"path": [
						"tc",
						"team",
						"6368c011642b964cb6e371a5"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteTaskCollectionByID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check for Status Code\", () => {",
							"    pm.response.to.have.status(202)",
							"})",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"host\") + \"/tc/123\",",
							"    method: \"DELETE\"",
							"}, (err, res) => {",
							"    pm.test(\"404 User dosen't exist\", () => {",
							"        pm.expect(res).to.have.status(404)",
							"    })",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/tc/{{tcTempID}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"tc",
						"{{tcTempID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateTaskCollection",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check Status Code\", () => {",
							"    pm.response.to.have.status(202)",
							"})",
							"",
							"var invalidJSON = \"{naem: 123'}\"",
							"var validJSON = {",
							"    \"name\": \"TaskCollection2\",",
							"    \"ownerID\": \"321\"",
							"}",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"host\") + \"/tc?id=\" + pm.environment.get(\"tcTempID\"),",
							"    method: \"PATCH\",",
							"    body: invalidJSON,",
							"    header: {",
							"        'Content-Type': 'application/json'",
							"    }",
							"}, (err, res) => {",
							"    pm.test(\"Invalid JSON\", () => {",
							"        pm.expect(res).to.have.status(400)",
							"    })",
							"})",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"host\") + \"/tc?id=123\" ,",
							"    method: \"PATCH\",",
							"    body: JSON.stringify(validJSON),",
							"    header: {",
							"        'Content-Type': 'application/json'",
							"    }",
							"}, (err, res) => {",
							"    pm.test(\"Target User dosent exist\", () => {",
							"        pm.expect(res).to.have.status(404)",
							"    })",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"TestCollection3\",\n    \"ownerID\": \"1\",\n    \"teamID\": \"6368c011642b964cb6e371a5\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/tc?id={{tcTempID}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"tc"
					],
					"query": [
						{
							"key": "id",
							"value": "{{tcTempID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GetTasksByUserIDandPriority",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/task/priority/63773343094b4d6d2ec651f9",
					"host": [
						"{{host}}"
					],
					"path": [
						"task",
						"priority",
						"63773343094b4d6d2ec651f9"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteTeam",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Team Status check\", () => {",
							"    pm.response.to.have.status(202)",
							"})",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"host\") + \"/teammanagement/\" + \"123\",",
							"    method: \"DELETE\",",
							"    ",
							"}, (err, res) =>{",
							"    pm.test(\"Team does not exist\", () => {",
							"        pm.expect(res).to.have.status(404)",
							"    })",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/teammanagement/6376011f7a4f5027912c869d",
					"host": [
						"{{host}}"
					],
					"path": [
						"teammanagement",
						"6376011f7a4f5027912c869d"
					]
				}
			},
			"response": []
		},
		{
			"name": "CreateTeam",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create Team\", function(){",
							"    pm.response.to.have.status(202)",
							"})",
							"",
							"",
							"var body2 = JSON.stringify([{",
							"    \"teamname\": \"Rot\",",
							"    \"members\": [\"3\",\"4\",\"7\"],",
							"    \"userID\": \"1\"",
							"}])",
							"",
							"",
							"pm.sendRequest({",
							"    url:pm.environment.get(\"host\")+\"/teammanagement/\",",
							"    method: \"POST\",",
							"    body: body2,",
							"}, (err, res) => {",
							"    pm.test(\"Body error\", function(){",
							"        pm.expect(res).to.have.status(500)",
							"       ",
							"    })",
							"    ",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"teamName\": \"Rot\",\n    \"members\": [\"3\",\"4\",\"7\"],\n    \"userID\": \"1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/teammanagement",
					"host": [
						"{{host}}"
					],
					"path": [
						"teammanagement"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateTeam",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Update Team Status\", () => {",
							"    pm.response.to.have.status(202)",
							"})",
							"",
							"",
							"var body = JSON.stringify([{",
							"    \"teamname\": \"Rot\",",
							"    \"members\": [\"3\",\"4\",\"7\"],",
							"    \"userID\": \"1\"",
							"}])",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"host\") + \"/teammanagement/1\",",
							"    method: \"PUT\",",
							"    ",
							"}, (err, res) =>{",
							"    pm.test(\"Team does not exist\", () => {",
							"        pm.expect(res).to.have.status(404)",
							"    })",
							"})",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"host\") + \"/teammanagement/\",",
							"    method: \"PUT\",",
							"}, (err, res) =>{",
							"    pm.test(\"Please Enter Team\", () => {",
							"        pm.expect(res).to.have.status(405)",
							"    })",
							"})",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"host\") + \"/teammanagement\",",
							"    method: \"PUT\",",
							"}, (err, res) => {",
							"    pm.test(\"Body error\", () => {",
							"        pm.expect(res).to.have.status(500)",
							"    })",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"teamName\": \"OKAPI\",\n    \"members\": [\"3\",\"4\",\"7\"],\n    \"userID\": \"1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/teammanagement/1",
					"host": [
						"{{host}}"
					],
					"path": [
						"teammanagement",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "AddMembersTeam",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Team and Member Status check\", function(){",
							"    pm.response.to.have.status(202)",
							"})",
							"",
							"",
							"var body2 = JSON.stringify([{",
							"    \"_id\": \"637601207a4f5027912c869e\",",
							"    \"teamname\": \"Rot\",",
							"    \"members\": [\"3\",\"4\",\"7\"],",
							"    \"userID\": \"1\"",
							"}])",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"host\") + \"/teammanagement/\" + \"123\",",
							"    method: \"POST\",",
							"}, (err, res) =>{",
							"    pm.test(\"Add Team Member\", () => {",
							"        pm.expect(res).to.have.status(405)",
							"    })",
							"})",
							"",
							"pm.sendRequest({",
							"    url:pm.environment.get(\"host\")+\"/teammanagement/\",",
							"    method: \"POST\",",
							"}, (err, res) => {",
							"    pm.test(\"Enter the Team\", function(){",
							"        pm.expect(res).to.have.status(400)",
							"       ",
							"    })",
							"    ",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/teammanagement/637601217a4f5027912c869f/999",
					"host": [
						"{{host}}"
					],
					"path": [
						"teammanagement",
						"637601217a4f5027912c869f",
						"999"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteMemberTeam",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Team and Member Status check\", () => {",
							"    pm.response.to.have.status(202)",
							"})",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"host\") + \"/teammanagement/\" + \"123\",",
							"    method: \"DELETE\",",
							"}, (err, res) =>{",
							"    pm.test(\"Team does not exist\", () => {",
							"        pm.expect(res).to.have.status(404)",
							"    })",
							"})",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"host\") + \"/teammanagement/\" + \"123\" + \"55\",",
							"    method: \"DELETE\",",
							"}, (err, res) =>{",
							"    pm.test(\"Team Member does not exist\", () => {",
							"        pm.expect(res).to.have.status(404)",
							"    })",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/teammanagement/637601207a4f5027912c869e/3",
					"host": [
						"{{host}}"
					],
					"path": [
						"teammanagement",
						"637601207a4f5027912c869e",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetPrivateTasksByUserID",
			"request": {
				"method": "GET",
				"header": []
			},
			"response": []
		},
		{
			"name": "GetTasksScheduledForOneWeekByUserID",
			"request": {
				"method": "GET",
				"header": []
			},
			"response": []
		},
		{
			"name": "GetSharedTasksByUserID",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/task/shared/63773343094b4d6d2ec651f9",
					"host": [
						"{{host}}"
					],
					"path": [
						"task",
						"shared",
						"63773343094b4d6d2ec651f9"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}